package main

import (
	"os/signal"
	"net/http"
	"github.com/richardsang2008/accountptcmanager/controller"
	"fmt"
	"os"
	"github.com/richardsang2008/accountptcmanager/utility"
	"github.com/gin-gonic/gin"

	"time"
	"github.com/gin-contrib/pprof"

	"github.com/richardsang2008/accountptcmanager/services"

	"github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"
	_ "./docs" // docs is generated by Swag CLI, you have to import it.
)

func WaitForCtrlC(server *http.Server) {
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	go func() {
		<-c
		for sig := range c {
			// sig is a ^C, handle it
			fmt.Print(sig)
			controller.Data.Close()
		}
	}()
	if err := server.ListenAndServe(); err != nil {
		if err == http.ErrServerClosed {

			utility.MLog.Panic("Server closed under request")
		} else {
			utility.MLog.Panic("Server closed unexpect")
		}
	}
}
// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
	utility.MCache.New(5*time.Minute,10*time.Minute)
	config:=utility.LoadConfiguration("appconfig.json")
	utility.MCache.Set("configuration",config,5*time.Minute)
	//s,found:=utility.MCache.Get("configuration")
	f,_:=utility.MLog.New(config.LogFile,config.LogLevel)
	controller.Data.New(config.MysqlDatabase.Username,config.MysqlDatabase.Password,config.MysqlDatabase.Host,config.MysqlDatabase.DBName)
	//gin.SetMode(gin.ReleaseMode)
	router := gin.Default()
	pprof.Register(router)
	//to meet the old one
	router.POST("/account/add", services.AddAccount)
	//router.GET("/account/request", services.GetAccount)
	//router.GET("/account/release", services.GetAccount)
	//end of meet the old one
	router.POST("/account", services.AddAccount)
	router.GET("account/:id", services.GetAccount)
	//router.GET("account/", services.GetAccount)
	address:=fmt.Sprintf("%v:%s",config.Host,config.Port)
	server := &http.Server{
		Addr:    address,
		Handler: router,
	}
	WaitForCtrlC(server)
	defer utility.MLog.Close(f)
	defer controller.Data.Close()
}
